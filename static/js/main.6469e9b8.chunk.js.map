{"version":3,"sources":["Redux/Store.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["rerenderEntireTree","store","_state","newLength","newSection","coil","_id","v1","length","section","_subscribe","observer","getState","this","App","props","state","useState","errorLength","setErrorLength","errorSection","setErrorSection","value","onChange","e","text","addValueLength","currentTarget","placeholder","type","addValueSection","onClick","trim","newCoil","push","addCoil","className","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAEWA,EAAqB,aAqB5BC,EAAmB,CACnBC,OAAQ,CACJC,UAAW,GACXC,WAAY,GACZC,KAAM,CACF,CAACC,IAAKC,cAAMC,OAAQ,MAAOC,QAAS,WAG5CC,WARmB,SAQRC,GACPX,EAAqBW,GAEzBC,SAXmB,WAYf,OAAOC,KAAKX,SAmBLD,ICoBAa,MAhEf,SAAaC,GAET,IAAMC,EAAQD,EAAMd,MAAMC,OAFI,EA2BQe,mBAAwB,MA3BhC,mBA2BvBC,EA3BuB,KA2BVC,EA3BU,OA4BUF,mBAAwB,MA5BlC,mBA4BvBG,EA5BuB,KA4BTC,EA5BS,KA8B9B,OACI,6BACG,2BAAOC,MAAON,EAAMb,UACZoB,SA5BM,SAACC,GAClBL,EAAe,MDuBO,SAACM,GAC3BxB,EAAMC,OAAOC,UAAYsB,EACzBzB,ICvBI0B,CADWF,EAAEG,cAAcL,QA2BhBM,YAAa,iCACbC,KAAK,SAEZ,2BAAOP,MAAON,EAAMZ,WACbmB,SA3BO,SAACC,GACnBH,EAAgB,MDqBO,SAACI,GAC5BxB,EAAMC,OAAOE,WAAaqB,EAC1BzB,ICrBI8B,CADWN,EAAEG,cAAcL,QA0BhBM,YAAa,6CACbC,KAAK,SACZ,4BAAQE,QAxBJ,WACJf,EAAMb,UAAU6B,QAAUhB,EAAMZ,WAAW4B,ODoBhC,WACnB,IAAMC,EAAoB,CAAC3B,IAAKC,cAAME,QAASR,EAAMC,OAAOE,WAAYI,OAAQP,EAAMC,OAAOC,WAC7FF,EAAMC,OAAOG,KAAK6B,KAAKD,GACvBjC,ICtBQmC,GACQnB,EAAMb,UAAU6B,OAEhBhB,EAAMZ,WAAW4B,QACzBX,EAAgB,gBAFhBF,EAAe,iBAoBf,oDACCD,GAAe,yBAAKkB,UAAW,gBAAiBlB,GAChDE,GAAgB,yBAAKgB,UAAW,iBAAkBhB,GAElDJ,EAAMX,KAAKgC,KAAI,SAAAhC,GACZ,OACI,yBAAKiC,IAAKjC,EAAKC,KAEX,wEACeD,EAAKG,OADpB,UAGA,wFACqBH,EAAKI,gBCnD9B8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAI3C,EAAqB,WACrB4C,IAASC,OAAQ,kBAAC,EAAD,CAAK5C,MAAOA,IAEzB6C,SAASC,eAAe,UAEhC/C,IAEAC,EAAMS,WAAWV,GD8HX,kBAAmBgD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6469e9b8.chunk.js","sourcesContent":["import {v1} from \"uuid\";\r\n\r\nexport let rerenderEntireTree = () => {\r\n}\r\n\r\nexport type StoreType = {\r\n    _state: RootStateType\r\n    _subscribe: (observer: () => void) => void\r\n    getState: () => RootStateType\r\n}\r\nexport type RootStateType = {\r\n    coil: CoilType[]\r\n    newLength: string\r\n    newSection: string\r\n}\r\n\r\nexport type CoilType = {\r\n    _id: string\r\n    length: string\r\n    section: string\r\n}\r\n\r\n\r\nlet store: StoreType = {\r\n    _state: {\r\n        newLength: \"\",\r\n        newSection: \"\",\r\n        coil: [\r\n            {_id: v1(), length: \"500\", section: \"2x1.5\"}\r\n            ]\r\n    },\r\n    _subscribe(observer) {\r\n        rerenderEntireTree = observer\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n}\r\n\r\nexport const addValueLength = (text:string) => {\r\n    store._state.newLength = text\r\n    rerenderEntireTree()\r\n}\r\nexport const addValueSection = (text:string) => {\r\n    store._state.newSection = text\r\n    rerenderEntireTree()\r\n}\r\n\r\nexport const addCoil = () => {\r\n    const newCoil: CoilType = {_id: v1(), section: store._state.newSection, length: store._state.newLength}\r\n    store._state.coil.push(newCoil)\r\n    rerenderEntireTree()\r\n}\r\n\r\nexport default store","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {addCoil, addValueLength, addValueSection, StoreType} from \"./Redux/Store\";\n\n\n\ntype AppPropsType = {\n    store: StoreType\n}\n\nfunction App(props: AppPropsType) {\n\n    const state = props.store._state\n\n\n    const changeLength = (e: ChangeEvent<HTMLInputElement>) => {\n        setErrorLength(null)\n        let text = e.currentTarget.value\n        addValueLength(text)\n    }\n\n    const changeSection = (e: ChangeEvent<HTMLInputElement>) => {\n        setErrorSection(null)\n        let text = e.currentTarget.value\n        addValueSection(text)\n    }\n\n    const add = () => {\n        if (state.newLength.trim() && state.newSection.trim()) {\n            addCoil()\n        } else if (!state.newLength.trim()){\n            setErrorLength(\"need length\")\n        } else if (!state.newSection.trim()) {\n            setErrorSection(\"need section\")\n        }\n    }\n\n    const [errorLength, setErrorLength] = useState<string | null>(null)\n    const [errorSection, setErrorSection] = useState<string | null>(null)\n\n    return (\n        <div>\n           <input value={state.newLength}\n                   onChange={changeLength}\n                   placeholder={\"Длина\"}\n                   type=\"text\"/>\n\n            <input value={state.newSection}\n                   onChange={changeSection}\n                   placeholder={\"Сечение\"}\n                   type=\"text\"/>\n            <button onClick={add}>Добавить</button>\n            {errorLength && <div className={\"error-length\"}>{errorLength}</div>}\n            {errorSection && <div className={\"error-section\"}>{errorSection}</div>}\n\n            {state.coil.map(coil => {\n                return (\n                    <div key={coil._id}>\n\n                        <span>\n                            {`Длина: ${coil.length}---- `}\n                        </span>\n                        <span>\n                            {` ----Сечение ${coil.section}`}\n                        </span>\n                    </div>\n                )\n            })}\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./Redux/Store\";\nlet rerenderEntireTree = () => {\n    ReactDOM.render( <App store={store}\n        />,\n        document.getElementById('root'));\n}\nrerenderEntireTree()\n\nstore._subscribe(rerenderEntireTree)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}